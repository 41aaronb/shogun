CODING CONVENTIONS:

FORMATTING:

- indenting uses stroustrup style with tabsize 4, i.e. for emacs use in your
	~/.emacs

	(add-hook 'c-mode-common-hook
	 (lambda ()
	  (show-paren-mode 1)
	  (setq indent-tabs-mode t)
	  (c-set-style "stroustrup")
	  (setq tab-width 4)))


	for vim in ~/.vimrc

	set cindent         " C style indenting
	set ts=4            " tabstop 
	set sw=4            " shiftwidth

- avoid whitespaces at end of lines and use only tabs for indenting

- semicolons and commas ;, should be placed directly after a variable/statement

  x+=1;
  set_cache_size(0);

  for (int i=0; i<10; i++)
      ...

- brackets () and (greater/lower) equal sign ><= should should not contain
  unecessary spaces, e.g:

  int a=1;
  int b=kernel->compute();

  if (a==1)
  {
  }

  exceptions are logical subunits

  if ( (a==1) && (b==1) )
  {
  }


- breaking long lines and strings
	limit yourselves to 80 columns

	for (INT vec=params->start; vec<params->end &&
			!CSignal::cancel_computations(); vec++)
	{
		//foo
	}

	however exceptions are OK if readability is increased (as in function definitions)

- functions look like

	INT* fun(INT* foo)
	{
		return foo;
	}

  and are separated by a newline, e.g:

	INT* fun1(INT* foo1)
	{
		return foo;
	}

	INT* fun2(INT* foo2)
	{
		return foo2;
	}

- same for if () else clauses, while/for loops

	if (foo)
		do_stuff();

	if (foo)
	{
		do_stuff();
		do_more();
	}

IFDEFS:

- use ifdefs sparingly (really limit yourself to the ones
		necessary) as their extreme usage makes the code completely
		unreadable.
- if you need to use ifdefs always comment the corresponding #else / #endif:

#ifdef HAVE_PYTHON
#else //HAVE_PYTHON
#endif //HAVE_PYTHON

TYPES:
- types (use only these!):
	CHAR	(8bit char(maybe signed or unsigned))
	BYTE	(8bit unsigned char)
	WORD	(16bit unsigned short)
	UINT	(32bit unsinged int)
	INT		(32bit int)
	LONG	(64bit int)
	DREAL	(double)
	LONGREAL (long double)

	exceptions: file IO / matlab interface

- classes must be (directly or indirectly) derived from CSGObject

- don't use fprintf/printf, but SG_DEBUG/SG_INFO/SG_WARNING/SG_ERROR/SG_PRINT (if in a from
		CSGObject derived object) or the static SG_SDEBUG/... functions elsewise

NAMING CONVENTIONS:

- naming variables:
	- in classes are member variables are named like m_feature_vector (to avoid
			shadowing and the often hard to find bugs shadowing causes)
	- parameters (in functions) shall be named e.g. feature_vector
	- don't use meaningless variable names, it is however fine to use short names 
	like i,j,k etc in loops
	- class names start with 'C', each syllable/subword starts with a capital letter,
	 e.g. CStringFeatures

- constants/defined objects are UPPERCASE, i.e. REALVALUED

- function are named like get_feature_vector() and should be limited to as few arguments as
possible (no monster functions with > 5 arguments please)

- objects which can deal with features of type DREAL and class SIMPLE don't need
to contain Real/Simple in class name

-others are required to clarify class/type they can handle, e.g.
CSparseByteLinearKernel, CSparseGaussianKernel


-variable and function names are all lowercase (except for class Con/Destructors)
syllables/subwords are separated by '_', e.g. compute_kernel_value(), my_local_variable

-class member variables all start with m_, e.g. m_member (this is to avoid shadowing)

- features
	-featureclass Simple/Sparse
		-featuretype Real/Byte/...
- preprocessors
	-featureclass Simple/Sparse
		-featuretype Real/Byte/...
- kernel
	-featureclass Simple/Sparse
		-featuretype Real/Byte/...
			-kerneltype Linear/Gaussian/...

VERSIONING SCHEME:

- an automagic version will be created from the date of the last svn update.
if that is not enough make releases:

e.g.: svn cp trunk releases/shogun_0_1_0
