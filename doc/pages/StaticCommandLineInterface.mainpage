/** \page staticcmdline Static Command Line Interface Function Reference


\section Features_sec Features
\arg \b load_features \verbatim load_features filename feature_class type target[ size[ comp_features]] \endverbatim
\arg \b save_features \verbatim save_features filename type target \endverbatim
\arg \b clean_features \verbatim clean_features TRAIN|TEST \endverbatim
\arg \b get_features \verbatim features = get_features TRAIN|TEST \endverbatim
\arg \b add_features \verbatim add_features TRAIN|TEST features[ DNABINFILE|<ALPHABET>] \endverbatim
\arg \b set_features \verbatim set_features TRAIN|TEST features[ DNABINFILE|<ALPHABET>] \endverbatim
\arg \b set_ref_features \verbatim set_ref_features TRAIN|TEST \endverbatim
\arg \b del_last_features \verbatim del_last_features TRAIN|TEST \endverbatim
\arg \b convert \verbatim convert TRAIN|TEST from_class from_type to_class to_type[ order start gap reversed] \endverbatim
\arg \b from_position_list \verbatim from_position_list TRAIN|TEST winsize shift[ skip] \endverbatim
\arg \b slide_window \verbatim slide_window TRAIN|TEST winsize shift[ skip] \endverbatim
\arg \b reshape \verbatim reshape TRAIN|TEST num_feat num_vec \endverbatim
\arg \b load_labels \verbatim load_labels filename TRAIN|TARGET \endverbatim
\arg \b set_labels \verbatim set_labels TRAIN|TEST labels \endverbatim
\arg \b get_labels \verbatim labels = get_labels TRAIN|TEST \endverbatim

\section Kernel_sec Kernel
\arg \b set_kernel \verbatim set_kernel type size[ kernel-specific parameters] \endverbatim
\arg \b add_kernel \verbatim add_kernel weight kernel-specific parameters \endverbatim
\arg \b del_last_kernel \verbatim del_last_kernel \endverbatim
\arg \b init_kernel \verbatim init_kernel TRAIN|TEST \endverbatim
\arg \b clean_kernel \verbatim clean_kernel \endverbatim
\arg \b save_kernel \verbatim save_kernel filename \endverbatim
\arg \b load_kernel_init \verbatim load_kernel_init filename \endverbatim
\arg \b save_kernel_init \verbatim save_kernel_init filename \endverbatim
\arg \b get_kernel_matrix \verbatim K = get_kernel_matrix \endverbatim
\arg \b set_custom_kernel \verbatim set_custom_kernel kernelmatrix DIAG|FULL|FULL2DIAG \endverbatim
\arg \b set_WD_position_weights \verbatim set_WD_position_weights W[ TRAIN|TEST] \endverbatim
\arg \b get_subkernel_weights \verbatim W = get_subkernel_weights \endverbatim
\arg \b set_subkernel_weights \verbatim set_subkernel_weights W \endverbatim
\arg \b set_subkernel_weights_combined \verbatim set_subkernel_weights_combined W idx \endverbatim
\arg \b set_last_subkernel_weights \verbatim set_last_subkernel_weights W \endverbatim
\arg \b get_WD_position_weights \verbatim W = get_WD_position_weights \endverbatim
\arg \b get_last_subkernel_weights \verbatim W = get_last_subkernel_weights \endverbatim
\arg \b compute_by_subkernels \verbatim W = compute_by_subkernels \endverbatim
\arg \b init_kernel_optimization \verbatim init_kernel_optimization \endverbatim
\arg \b get_kernel_optimization \verbatim W = get_kernel_optimization \endverbatim
\arg \b delete_kernel_optimization \verbatim delete_kernel_optimization \endverbatim
\arg \b use_diagonal_speedup \verbatim use_diagonal_speedup USAGE_STR0|1USAGE_STR \endverbatim
\arg \b set_kernel_optimization_type \verbatim set_kernel_optimization_type USAGE_STRFASTBUTMEMHUNGRY|SLOWBUTMEMEFFICIENTUSAGE_STR \endverbatim
\arg \b resize_kernel_cache \verbatim resize_kernel_cache size \endverbatim

\section Distance_sec Distance
\arg \b set_distance \verbatim set_distance type data type[ distance-specific parameters] \endverbatim
\arg \b init_distance \verbatim init_distance TRAIN|TEST \endverbatim
\arg \b get_distance_matrix \verbatim D = get_distance_matrix \endverbatim

\section Classifier_sec Classifier
\arg \b classify \verbatim result = classify \endverbatim
\arg \b svm_classify \verbatim result = svm_classify \endverbatim
\arg \b classify_example \verbatim result = classify_example feature_vector_index \endverbatim
\arg \b svm_classify_example \verbatim result = svm_classify_example feature_vector_index \endverbatim
\arg \b get_classifier \verbatim bias, weights = get_classifier \endverbatim
\arg \b get_clustering \verbatim radi centers|merge_distances pairs = get_clustering \endverbatim
\arg \b new_svm \verbatim new_svm LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN \endverbatim
\arg \b new_classifier \verbatim new_classifier LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN \endverbatim
\arg \b new_regression \verbatim new_regression SVRLIGHT|LIBSVR|KRR \endverbatim
\arg \b new_clustering \verbatim new_clustering KMEANS|HIERARCHICAL \endverbatim
\arg \b load_svm \verbatim filename type = load_svm \endverbatim
\arg \b get_svm \verbatim bias alphas = get_svm \endverbatim
\arg \b set_svm \verbatim set_svm bias alphas \endverbatim
\arg \b get_svm_objective \verbatim objective = get_svm_objective \endverbatim
\arg \b do_auc_maximization \verbatim do_auc_maximization auc \endverbatim
\arg \b set_perceptron_parameters \verbatim set_perceptron_parameters learnrate maxiter \endverbatim
\arg \b train_classifier \verbatim train_classifier [classifier-specific parameters] \endverbatim
\arg \b train_regression \verbatim train_regression \endverbatim
\arg \b train_clustering \verbatim train_clustering \endverbatim
\arg \b svm_train \verbatim svm_train [classifier-specific parameters] \endverbatim
\arg \b svm_test \verbatim svm_test \endverbatim
\arg \b svm_qpsize \verbatim svm_qpsize size \endverbatim
\arg \b svm_max_qpsize \verbatim svm_max_qpsize size \endverbatim
\arg \b svm_bufsize \verbatim svm_bufsize size \endverbatim
\arg \b c \verbatim c C1[ C2] \endverbatim
\arg \b svm_epsilon \verbatim svm_epsilon epsilon \endverbatim
\arg \b svr_tube_epsilon \verbatim svr_tube_epsilon tube_epsilon \endverbatim
\arg \b svm_one_class_nu \verbatim svm_one_class_nu nu \endverbatim
\arg \b mkl_parameters \verbatim mkl_parameters weight_epsilon C_MKL \endverbatim
\arg \b svm_max_train_time \verbatim svm_max_train_time max_train_time \endverbatim
\arg \b use_precompute \verbatim use_precompute enable_precompute \endverbatim
\arg \b use_mkl \verbatim use_mkl enable_mkl \endverbatim
\arg \b use_shrinking \verbatim use_shrinking enable_shrinking \endverbatim
\arg \b use_batch_computation \verbatim use_batch_computation enable_batch_computation \endverbatim
\arg \b use_linadd \verbatim use_linadd enable_linadd \endverbatim
\arg \b svm_use_bias \verbatim svm_use_bias enable_bias \endverbatim
\arg \b krr_tau \verbatim krr_tau tau \endverbatim

\section Preprocessors_sec Preprocessors
\arg \b add_preproc \verbatim add_preproc preproc[, preproc-specific parameters] \endverbatim
\arg \b del_preproc \verbatim del_preproc \endverbatim
\arg \b load_preproc \verbatim load_preproc filename \endverbatim
\arg \b save_preproc \verbatim save_preproc filename \endverbatim
\arg \b attach_preproc \verbatim attach_preproc TRAIN|TEST force \endverbatim
\arg \b clean_preproc \verbatim clean_preproc \endverbatim

\section HMM_sec HMM
\arg \b new_hmm \verbatim new_hmm N M \endverbatim
\arg \b load_hmm \verbatim load_hmm filename \endverbatim
\arg \b save_hmm \verbatim save_hmm filename[ save_binary] \endverbatim
\arg \b get_hmm \verbatim p q a b = get_hmm \endverbatim
\arg \b append_hmm \verbatim append_hmm p q a b \endverbatim
\arg \b append_model \verbatim append_model filename[ base1 base2] \endverbatim
\arg \b set_hmm \verbatim set_hmm p q a b \endverbatim
\arg \b set_hmm_as \verbatim set_hmm_as POS|NEG|TEST \endverbatim
\arg \b chop \verbatim chop chop \endverbatim
\arg \b pseudo \verbatim pseudo pseudo \endverbatim
\arg \b load_defs \verbatim load_defs filename init \endverbatim
\arg \b hmm_classify \verbatim result = hmm_classify \endverbatim
\arg \b hmm_test \verbatim hmm_test output name[ ROC filename[ neglinear[ poslinear]]] \endverbatim
\arg \b one_class_linear_hmm_classify \verbatim result = one_class_linear_hmm_classify \endverbatim
\arg \b one_class_hmm_test \verbatim one_class_hmm_test output name[ ROC filename[ linear]] \endverbatim
\arg \b one_class_hmm_classify \verbatim result = one_class_hmm_classify \endverbatim
\arg \b one_class_hmm_classify_example \verbatim result = one_class_hmm_classify_example feature_vector_index \endverbatim
\arg \b hmm_classify_example \verbatim result = hmm_classify_example feature_vector_index \endverbatim
\arg \b output_hmm \verbatim output_hmm \endverbatim
\arg \b output_hmm_defined \verbatim output_hmm_defined \endverbatim
\arg \b hmm_likelihood \verbatim likelihood = hmm_likelihood \endverbatim
\arg \b likelihood \verbatim likelihood \endverbatim
\arg \b save_hmm_likelihood \verbatim save_hmm_likelihood filename[ save_binary] \endverbatim
\arg \b get_viterbi_path \verbatim path likelihood = get_viterbi_path dim \endverbatim
\arg \b vit_def \verbatim vit_def \endverbatim
\arg \b vit \verbatim vit \endverbatim
\arg \b bw \verbatim bw \endverbatim
\arg \b bw_def \verbatim bw_def \endverbatim
\arg \b bw_trans \verbatim bw_trans \endverbatim
\arg \b linear_train \verbatim linear_train \endverbatim
\arg \b save_hmm_path \verbatim save_hmm_path filename[ save_binary] \endverbatim
\arg \b convergence_criteria \verbatim convergence_criteria num_iterations epsilon \endverbatim
\arg \b normalize_hmm \verbatim normalize_hmm [keep_dead_states] \endverbatim
\arg \b add_states \verbatim add_states states value \endverbatim
\arg \b permutation_entropy \verbatim permutation_entropy width seqnum \endverbatim
\arg \b relative_entropy \verbatim result = relative_entropy \endverbatim
\arg \b entropy \verbatim result = entropy \endverbatim
\arg \b set_feature_matrix \verbatim set_feature_matrix features \endverbatim
\arg \b new_plugin_estimator \verbatim new_plugin_estimator pos_pseudo neg_pseudo \endverbatim
\arg \b train_estimator \verbatim train_estimator \endverbatim
\arg \b test_estimator \verbatim test_estimator \endverbatim
\arg \b plugin_estimate_classify_example \verbatim result = plugin_estimate_classify_example feature_vector_index \endverbatim
\arg \b plugin_estimate_classify \verbatim result = plugin_estimate_classify \endverbatim
\arg \b set_plugin_estimate \verbatim set_plugin_estimate emission_probs model_sizes \endverbatim
\arg \b get_plugin_estimate \verbatim emission_probs model_sizes = get_plugin_estimate \endverbatim

\section Structure_sec Structure
\arg \b best_path \verbatim best_path from to \endverbatim
\arg \b best_path_2struct \verbatim prob path pos = best_path_2struct p q cmd_trans seq pos genestr penalties penalty_info nbest content_weights segment_sum_weights \endverbatim
\arg \b set_plif_struct \verbatim set_plif_struct id name limits penalties transform min_value max_value use_cache use_svm \endverbatim
\arg \b get_plif_struct \verbatim id name limits penalties transform min_value max_value use_cache use_svm = get_plif_struct \endverbatim
\arg \b precompute_content_svms \verbatim precompute_content_svms sequence position_list weights \endverbatim
\arg \b set_model \verbatim set_model content_weights transition_pointers use_orf mod_words \endverbatim
\arg \b best_path_trans \verbatim prob path pos = best_path_trans p q nbest seq_path a_trans segment_loss \endverbatim
\arg \b best_path_trans_deriv \verbatim p_deriv q_deriv cmd_deriv penalties_deriv my_scores my_loss = best_path_trans_deriv  my_path my_pos p q cmd_trans seq pos genestr penalties state_signals penalty_info dict_weights mod_words [ segment_loss segmend_ids_mask] \endverbatim
\arg \b best_path_no_b \verbatim prob path = best_path_no_b p q a max_iter \endverbatim
\arg \b best_path_trans_simple \verbatim prob path = best_path_trans_simple p q cmd_trans seq nbest \endverbatim
\arg \b best_path_no_b_trans \verbatim prob path = best_path_no_b_trans p q cmd_trans max_iter nbest \endverbatim

\section POIM_sec POIM
\arg \b compute_poim_wd \verbatim W = compute_poim_wd max_order distribution \endverbatim
\arg \b get_SPEC_consensus \verbatim W = get_SPEC_consensus \endverbatim
\arg \b get_SPEC_scoring \verbatim W = get_SPEC_scoring max_order \endverbatim
\arg \b get_WD_consensus \verbatim W = get_WD_consensus \endverbatim
\arg \b get_WD_scoring \verbatim W = get_WD_scoring max_order \endverbatim

\section Utility_sec Utility
\arg \b crc \verbatim crc32 = crc string \endverbatim
\arg \b ! \verbatim ! system_command \endverbatim
\arg \b exit \verbatim exit \endverbatim
\arg \b quit \verbatim quit \endverbatim
\arg \b exec \verbatim exec filename \endverbatim
\arg \b set_output \verbatim set_output STDERR|STDOUT|filename \endverbatim
\arg \b set_threshold \verbatim set_threshold threshold \endverbatim
\arg \b threads \verbatim threads num_threads \endverbatim
\arg \b translate_string \verbatim translation = translate_string string, order, start \endverbatim
\arg \b clear \verbatim clear \endverbatim
\arg \b tic \verbatim tic \endverbatim
\arg \b toc \verbatim toc \endverbatim
\arg \b print \verbatim print msg \endverbatim
\arg \b echo \verbatim echo level \endverbatim
\arg \b loglevel \verbatim loglevel ALL|DEBUG|INFO|NOTICE|WARN|ERROR|CRITICAL|ALERT|EMERGENCY \endverbatim
\arg \b syntax_highlight \verbatim syntax_highlight ON|OFF \endverbatim
\arg \b progress \verbatim progress ON|OFF \endverbatim
\arg \b get_version \verbatim version = get_version \endverbatim
\arg \b help \verbatim help \endverbatim

*/
