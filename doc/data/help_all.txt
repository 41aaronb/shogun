Commands in group Features
	sg('load_features', filename, feature_class, type, target[, size[, comp_features]])
	sg('save_features', filename, type, target)
	sg('clean_features', 'TRAIN|TEST')
	[features]=sg('get_features', 'TRAIN|TEST')
	sg('add_features', 'TRAIN|TEST', features[, DNABINFILE|<ALPHABET>])
	sg('set_features', 'TRAIN|TEST', features[, DNABINFILE|<ALPHABET>])
	sg('set_ref_features', 'TRAIN|TEST')
	sg('del_last_features', 'TRAIN|TEST')
	sg('convert', 'TRAIN|TEST', from_class, from_type, to_class, to_type[, order, start, gap, reversed])
	sg('from_position_list', 'TRAIN|TEST', winsize, shift[, skip])
	sg('slide_window', 'TRAIN|TEST', winsize, shift[, skip])
	sg('reshape', 'TRAIN|TEST', num_feat, num_vec)
	sg('load_labels', filename, 'TRAIN|TARGET')
	sg('set_labels', 'TRAIN|TEST', labels)
	[labels]=sg('get_labels', 'TRAIN|TEST')

Commands in group Kernel
	sg('set_kernel', type, size[, kernel-specific parameters])
	sg('add_kernel', weight, kernel-specific parameters)
	sg('del_last_kernel')
	sg('init_kernel', 'TRAIN|TEST')
	sg('clean_kernel')
	sg('save_kernel', filename)
	sg('load_kernel_init', filename)
	sg('save_kernel_init', filename)
	[K]=sg('get_kernel_matrix')
	sg('set_custom_kernel', kernelmatrix, 'DIAG|FULL|FULL2DIAG')
	sg('set_WD_position_weights', W[, 'TRAIN|TEST'])
	[W]=sg('get_subkernel_weights')
	sg('set_subkernel_weights', W)
	sg('set_subkernel_weights_combined', W, idx)
	sg('set_last_subkernel_weights', W)
	[W]=sg('get_WD_position_weights')
	[W]=sg('get_last_subkernel_weights')
	[W]=sg('compute_by_subkernels')
	sg('init_kernel_optimization')
	[W]=sg('get_kernel_optimization')
	sg('delete_kernel_optimization')
	sg('use_diagonal_speedup', '0|1')
	sg('set_kernel_optimization_type', 'FASTBUTMEMHUNGRY|SLOWBUTMEMEFFICIENT')
	sg('resize_kernel_cache', size)

Commands in group Distance
	sg('set_distance', type, data type[, distance-specific parameters])
	sg('init_distance', 'TRAIN|TEST')
	[D]=sg('get_distance_matrix')

Commands in group SVM & Other Classifier
	[result]=sg('classify')
	[result]=sg('svm_classify')
	[result]=sg('classify_example', feature_vector_index)
	[result]=sg('svm_classify_example', feature_vector_index)
	[bias, weights]=sg('get_classifier')
	[radi, centers|merge_distances, pairs]=sg('get_clustering')
	sg('new_svm', 'LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN')
	sg('new_classifier', 'LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN')
	sg('new_regression', 'SVRLIGHT|LIBSVR|KRR')
	sg('new_clustering', 'KMEANS|HIERARCHICAL')
	[filename, type]=sg('load_svm')
	[bias, alphas]=sg('get_svm')
	sg('set_svm', bias, alphas)
	[objective]=sg('get_svm_objective')
	sg('do_auc_maximization', 'auc')
	sg('set_perceptron_parameters', learnrate, maxiter)
	sg('train_classifier', [classifier-specific parameters])
	sg('train_regression')
	sg('train_clustering')
	sg('svm_train', [classifier-specific parameters])
	sg('svm_test')
	sg('svm_qpsize', size)
	sg('svm_max_qpsize', size)
	sg('svm_bufsize', size)
	sg('c', C1, C2)
	sg('svm_epsilon', epsilon)
	sg('svr_tube_epsilon', tube_epsilon)
	sg('svm_one_class_nu', nu)
	sg('mkl_parameters', weight_epsilon, C_MKL)
	sg('svm_max_train_time', max_train_time)
	sg('use_precompute', enable_precompute)
	sg('use_mkl', enable_mkl)
	sg('use_shrinking', enable_shrinking)
	sg('use_batch_computation', enable_batch_computation)
	sg('use_linadd', enable_linadd)
	sg('svm_use_bias', enable_bias)
	sg('krr_tau', tau)

Commands in group Preprocessors
	sg('add_preproc', preproc[, preproc-specific parameters])
	sg('del_preproc')
	sg('load_preproc', filename)
	sg('save_preproc', filename)
	sg('attach_preproc', 'TRAIN|TEST', force)
	sg('clean_preproc')

Commands in group HMM
	sg('new_hmm', N, M)
	sg('load_hmm', filename)
	sg('save_hmm', filename[, save_binary])
	[p, q, a, b]=sg('get_hmm')
	sg('append_hmm', p, q, a, b)
	sg('append_model', 'filename'[, base1, base2])
	sg('set_hmm', p, q, a, b)
	sg('set_hmm_as', POS|NEG|TEST)
	sg('chop', chop)
	sg('pseudo', pseudo)
	sg('load_defs', filename, init)
	[result]=sg('hmm_classify')
	sg('hmm_test', output name[, ROC filename[, neglinear[, poslinear]]])
	[result]=sg('one_class_linear_hmm_classify')
	sg('one_class_hmm_test', output name[, ROC filename[, linear]])
	[result]=sg('one_class_hmm_classify')
	[result]=sg('one_class_hmm_classify_example', feature_vector_index)
	[result]=sg('hmm_classify_example', feature_vector_index)
	sg('output_hmm')
	sg('output_hmm_defined')
	[likelihood]=sg('hmm_likelihood')
	sg('likelihood')
	sg('save_hmm_likelihood', filename[, save_binary])
	[path, likelihood]=sg('get_viterbi_path', dim)
	sg('vit_def')
	sg('vit')
	sg('bw')
	sg('bw_def')
	sg('bw_trans')
	sg('linear_train')
	sg('save_hmm_path', filename[, save_binary])
	sg('convergence_criteria', num_iterations, epsilon)
	sg('normalize_hmm', [keep_dead_states])
	sg('add_states', states, value)
	sg('permutation_entropy', width, seqnum)
	[result]=sg('relative_entropy')
	[result]=sg('entropy')
	sg('best_path', from, to)
	[prob, path, pos]=sg('best_path_2struct', p, q, cmd_trans, seq, pos, genestr, penalties, penalty_info, nbest, dict_weights, segment_sum_weights)
	[prob, path, pos]=sg('best_path_trans', p, q, cmd_trans, seq, pos, orf_info, genestr, penalties, state_signals, penalty_info, nbest, dict_weights, use_orf, mod_words [, segment_loss, segmend_ids_mask])
	[p_deriv, q_deriv, cmd_deriv, penalties_deriv, my_scores, my_loss]=sg('best_path_trans_deriv', my_path, my_pos, p, q, cmd_trans, seq, pos, genestr, penalties, state_signals, penalty_info, dict_weights, mod_words [, segment_loss, segmend_ids_mask])
	[prob, path]=sg('best_path_no_b', p, q, a, max_iter)
	[prob, path]=sg('best_path_trans_simple', p, q, cmd_trans, seq, nbest)
	[prob, path]=sg('best_path_no_b_trans', p, q, cmd_trans, max_iter, nbest)
	sg('new_plugin_estimator', pos_pseudo, neg_pseudo)
	sg('train_estimator')
	sg('test_estimator')
	[result]=sg('plugin_estimate_classify_example', feature_vector_index)
	[result]=sg('plugin_estimate_classify')
	sg('set_plugin_estimate', emission_probs, model_sizes)
	[emission_probs, model_sizes]=sg('get_plugin_estimate')

Commands in group POIM
	[W]=sg('compute_poim_wd', max_order, distribution)
	[W]=sg('get_SPEC_consensus')
	[W]=sg('get_SPEC_scoring', max_order)
	[W]=sg('get_WD_consensus')
	[W]=sg('get_WD_scoring', max_order)

Commands in group Utility
	[crc32]=sg('crc', string)
	sg('!', system_command)
	sg('exit')
	sg('quit')
	sg('exec', filename)
	sg('set_output', 'STDERR'|'STDOUT'|filename)
	sg('set_threshold', threshold)
	sg('threads', num_threads)
	[translation]=sg('translate_string', string, order, start)
	sg('clear')
	sg('tic')
	sg('toc')
	sg('print', msg)
	sg('echo', level)
	sg('loglevel', 'ALL|DEBUG|INFO|NOTICE|WARN|ERROR|CRITICAL|ALERT|EMERGENCY')
	sg('progress', 'ON|OFF')
	[version]=sg('get_version')
	sg('help')

