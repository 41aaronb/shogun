GENERAL

On most platforms (Linux,MacOSX,cygwin) it is sufficient to issue

./configure --enable-<interface>
make

where <interface> is one of the following R, matlab, python, octave.
Just running ./configure will compile a stand-a-lone version.

See ./configure --help for additional options.

If this does not work for you, see the SPECIFIC BUILD INSTRUCTIONS below


SPECIAL FEATURES

To enable Multiple Kernel Learning CPLEX(tm) is needed and one needs
to issue configure with ./configure --enable-<interface> --enable-cplex


REQUIREMENTS

Apart from the standard linux utils like bash, grep, test, sed, cut, ldd, uname gcc g++ and cat
python (debian package: python2.3 or python2.4 or python2.5), 
as well as makedepend (xutils-dev package) need to be installed, for the ./configure to work.

To compile the R interface you need to have the R developer files 
(debian package r-base-dev) installed.

To compile the octave interface you need to have the octave developer files 
(debian package octave2.1-headers or octave2.9-headers) installed.

To compile the python interface you need to have numpy version 1.x installed 
(debian package python-numpy and python-numpy-ext) installed.

Optionally you will need atlas and lapack (debian packages lapack3-dev, 
atlas3-headers atlas3-base-dev or atlas3-altivec-dev atlas3-sse2-dev)
installed. Note that atlas/lapack is only supported under linux (high
performance computing should be done under linux only anyway). In case
 atlas/lapack is unavailable, don't worry shogun will work without, though
slightly slower versions are used.


SPECIFIC BUILD INSTRUCTIONS


BUILDING ON DEBIAN GNU LINUX

Python (python2.3 or python2.4 or python2.5), as well as makedepend (xutils-dev package)
need to be installed.  To get atlas/lapack optimizations optionally also install the atlas3-*
packages aswell as the lapack3-* packages.

standalone:
===========

cd src
./configure
make

a shogun executable can be found in src/

octave
======

To compile the octave interface you need to have the octave developer files 
(debian package octave2.1-headers or octave2.9-headers).

then do a

./configure --enable-octave
make

a sg.oct file should be created. as a test start octave in the src/ directory
and type

addpath('../octave/examples')
svr_regression

R
=

To compile the R interface you need to have the R developer files 
(debian package r-base-dev) installed.

do the usual R CMD INSTALL <package>

python
======

To compile the python interface you need to have numpy version 1.x installed 
(debian package python-numpy and python-numpy-ext) and optionally for plotting
python-matplotlib installed. When using matplotlib, make sure you use numpy as
the underlying numeric toolkit, i.e. you have the line 

numerix      : numpy

in your /etc/matplotlibrc


then do a
./configure --enable-python
make

A sg.so file should be created in the src/ directory:
To test whether it is working try
PYTHONPATH=`pwd` python ../python/examples/svm_classification.py

object oriented python/swig interface:
======================================

proceed as for the python interface but now in addition install the swig package and
configure+compile shogun with:

  ./configure --enable-python --enable-siwg
  make
  sudo make install

to test if it is working try python ../python/examples/numpy_svm_matplotlib.py

BUILDING ON MACOSX

python:
=======
Get the precompiled binary packages
python, matplotlib, NumPy and wxPython from http://pythonmac.org/packages/py24-fat/index.html

Make sure you installed the XCode tools including X11 (such that makedepend
/usr/X11R6/bin/makedepend exists).

Note: On powerpc archs don't use gcc-4.0 / gcc-4.1 as it will fail with an internal compiler
error. Try gcc-4.2 instead or disable optimization (using -O0).
Also make sure you don't mix python versions (i.e. python2.4 and python2.5) on build/runtime.
You can specify the python version as a argument to configure, e.g.: --python=python2.4

./configure --enable-python
make

to test if it is working try:

PYTHONPATH=`pwd` python ../python/examples/svm_classification.py

object oriented python/swig interface:
======================================
Follow the above instructions for python. Then use fink/darwinports to install swig.

./configure --enable-python
make
sudo make install

to test if it is working try python ../python/examples/numpy_svm_matplotlib.py

octave:
=======
Use fink/darwinports to install octave. For intel-macs octave currently is only in the
unstable repository + it has to be compiled from source. Also note that g77
 got replaced by gfortran, so you might need to do a fink install gcc4 first (which takes
 an endless amount time to compile).

then do:

./configure --enable-octave
make

a sg.oct file should be created. as a test start octave in the src/ directory
and type

addpath('../octave/examples')
svr_regression

standalone:
===========
cd src
./configure
make

The shogun executable can be found in src/

R:
==
Install the full R package (e.g. the 93MB R-2.4.0.dmg image from
http://cran.r-project.org/bin/macosx/ )

then do the usual R CMD INSTALL <pkg>

After starting the R aqua gui, choose File->Source File and select the
shogun/R/examples/svm_classification.R example

If that does not work out (send us a bug report) and also please try the following:

Enter the src/ directory and do:

./configure --enable-R
(if that fails attach the configure.log in the bug report)
make

a sg.so file should be created. To test if that file is OK try in the
src/ directory:

R
>> dyn.load('sg.so')
sg <- function(...) .External("sg",...,PACKAGE="sg")
sg('help')

if that was still working go to the shogun/R directory and try
make clean
make

if a .tar.gz is successfully created, then the R CMD INSTALL <file>.tar.gz
should go through.

matlab:
=======

BUILDING ON WINDOWS / CYGWIN

	install gcc version 3.3 (gcc-3.4 is currently broken)

R:
==
I did not try the long and painful way of compiling R to get etc/Makeconf etc.
to be setup correctly. Thus the usual R CMD INSTALL <pkg> won't work (help welcome).

Instead install the R package from cran (i.e. using the R-2.4.0-win32.exe
		installer from http://cran.r-project.org/bin/windows/base/ )

Enter the src/ directory and do:

./configure --enable-R
(if that fails attach the configure.log in the bug report)
make

a sg.dll file should be created. To test if that file is OK try in the
src/ directory:

R
>> dyn.load('sg.dll')
sg <- function(...) .External("sg",...,PACKAGE="sg")
sg('help')

Instead of using library(sg) in your .R scripts you now have to use 

dyn.load('<path_to_shogun>/sg.dll')
sg <- function(...) .External("sg",...,PACKAGE="sg").

After this modification, The examples in R/examples should all work. To get
them to go start the R gui, choose File->Source R Code and select 
shogun/R/examples/svr_regression.R  (as this example has no other package dependencies).

matlab:
=======
	cd src
	./configure --enable-matlab
	make

	a sg.dll can be found in src/

	startup matlab and type sg('help') 

standalone:
===========

	cd src
	./configure
	make

	a shogun.exe can be found in src/


octave:
=======

	install octave and octave-headers
	cd src
	./configure --enable-octave
	make

	a sg.oct file can be found in src/
	try

	cd src
	octave
	addpath('../octave/examples')
	svr_regression


python:
=======

  install python2.4. then get numpy 1.0 from http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=175103
  
  extract the archive and in the numpy-1.0 directory type 

	python setup.py install

  this will eventually fail creating the _capi.dll library, as the libmingwex.a
  lib is not beeing linked with. as a workaround type

	gcc -shared -Wl,--enable-auto-image-base build/temp.cygwin-1.5.21-i686-2.4/numpy/numarray/_capi.o -L/usr/lib/python2.4/config -lpython2.4 -o build/lib.cygwin-1.5.21-i686-2.4/numpy/numarray/_capi.dll /usr/lib/mingw/libmingwex.a

  followed by another 

	python setup.py install

  to test whether all worked out do

	 cd
	 python
	 import numpy
	 print numpy.__version__
	 
	 it should list 1.0

  install matplotlib (optional):

  to do so first get the following cygwin packages: freetype2, libpng, zlib (don't forget the devel packages)
  then download the matplotlib src
  http://prdownloads.sourceforge.net/matplotlib/matplotlib-0.87.7.tar.gz?download and extract the archive

  add missing library links: ln -s /lib/libtk84.a /lib/libtk8.4.a and ln -s /lib/libtcl84.a /lib/libtcl8.4.a 
  edit the setup.py file: and modify the line: rc = dict({'backend':'GTKAgg', 'numerix':'numpy'})
  do unset DISPLAY; python setup.py install 


  now compile shogun:
	./configure --enable-python
	make

  this will create a sg.dll in the src/ dir

  to test if it is working, try:
	 cd src
	 PYTHONPATH=`pwd` python ../python/examples/svm_classification.py

object oriented python/swig interface:
======================================

do all of the above but now in addition install the swig package and
configure+compile shogun with:

  ./configure --enable-python --enable-siwg
  make install

to test if it is working try python ../python/examples/numpy_svm_matplotlib.py


PROBLEMS

In case header files or libraries are not at standard locations one needs
to manually adjust the libray/include paths using --includes or --libs
(see configure --help for additional options) 

The current gcc/g++ version in cygwin is broken. Please downgrade to 
gcc/g++ 3.x.x to get a working octave interface.
